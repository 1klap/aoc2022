#! /usr/bin/ruby
# frozen_string_literal: true

require 'set'

def nodes_around(node, nodes)
  r = []
  r << nodes[node.y][node.x - 1] if node.x > 0
  r << nodes[node.y][node.x + 1] if node.x < (nodes[0].length - 1)
  r << nodes[node.y - 1][node.x] if node.y > 0
  r << nodes[node.y + 1][node.x] if node.y < (nodes.length - 1)
  r
end

Node = Struct.new :height, :cost, :x, :y, :dir, keyword_init: true

# input = File.read('data/in_example1.txt')
input = File.read('data/in.txt')

nodes = []

input.split("\n")
  .each_with_index do |line, y|
    nodes[y] = []
    line.chars.each_with_index do |char, x|
      nodes[y].push Node.new height: char, cost: 100_000, x: x, y: y
    end
  end

start_node = nodes.flatten.select { |n| n.height == "S" }.first
end_node = nodes.flatten.select { |n| n.height == "E" }.first
start_node.cost = 0

def compute_cost(nodes, start_node)
  fringe = Set.new
  fringe << [start_node.x, start_node.y]

  while fringe.size > 0
    # puts "fringe size: #{fringe.size}"
    # puts fringe
    current_coords = fringe.first
    fringe.delete current_coords
    current = nodes[current_coords[1]][current_coords[0]]
    next_nodes = nodes_around current, nodes
    next_nodes = next_nodes.select do |n|
      diff_height = n.height.bytes.first - current.height.bytes.first
      diff_height = 1 if n.height == 'a' && current.height == 'S'
      diff_height = -1 if n.height == 'S' && current.height == 'a'
      (n.height != 'E' && (diff_height < 2)) ||
        (n.height == 'E') # && current.height == 'z')
    end
    next_nodes = next_nodes.select { |n| n.cost > current.cost + 1 }
    next_nodes.each do |n|
      if (n.cost > current.cost + 1)
        # puts "updating cost of node #{n} before=#{n.cost} after=#{candidate.cost + 1}"
        n.cost = current.cost + 1
        #if n.y > current.y
        #  n.dir = '^'
        #elsif n.y < current.y
        #  n.dir = 'v'
        #elsif n.x < current.x
        #  n.dir = '>'
        #else
        #  n.dir = '<'
        #end
        fringe << [n.x, n.y]
      end
    end
  end
end

compute_cost nodes, start_node

#nodes.each_with_index do |ys, y|
#  ys.each_with_index do |n, x|
#    if true #(x > ((nodes[0].length) /2)) 
#      pp = n.cost.to_s.rjust 4
#      # pp = (n.dir || '.').rjust 2
#      pp = " X" if n.height == "E"
#      print pp
#    end
#  end
#  print "\n"
#end
#puts "Start: #{start_node}"
puts "Solution part1: #{end_node}"

#################################

a_nodes = nodes.flatten.select { |n| n.height == 'a' || n.height == 'S' }

sol2 = a_nodes.map do |a_node|
  nodes.flatten.each { |n| n.cost = 100_000 }
  a_node.cost = 0
  compute_cost nodes, a_node
  end_node.cost
end.min

puts "Solution part2: #{sol2}"
